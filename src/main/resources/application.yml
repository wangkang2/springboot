server:
  port: 9999
  servlet:
    context-path: /springboot
student:
  name: wangkang
  age: 18
spring:
  mvc:
    view:
      prefix: /WEB-INF/views/
      suffix: .jsp
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8&serverTimezone=GMT%2B8&useUnicode=true&zeroDateTimeBehavior=convertToNull&autoReconnect=true&autoReconnectForPools=true&useSSL=false
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    password:
  data:
    solr:
#      host: http://127.0.0.1:8983/solr/myCore
      zk-host: 10.32.16.179:9983
      repositories:
        enabled: true
  kafka:
    bootstrap-servers: 192.168.8.10:9092
    producer:
      acks: all # 0-不应答。1-leader 应答。all-所有 leader 和 follower 应答。
      retries: 3 # 发送失败时，重试发送的次数
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: kafkaConsumer # 默认的消费组ID
      enable-auto-commit: true # 是否自动提交offset
      auto-commit-interval: 1000 # 提交offset延时(接收到消息后多久提交offset)
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params: count==countSql
  page-size-zero: true
  #mybatis打印sql日志
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
wechat:
  appID: wxe900623e08c260fa
  appsecret: 7d115647131f0714764649f3b92e6930
  tokenUrl: https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential
http-pool:
  maxTotal: 100 #连接池最大连接数
  defaultMaxPerRoute: 20 #并发数
  connectTimeout: 10000 #连接超时时间（毫秒）
  connectionRequestTimeout: 5000 #从连接池中获取到连接的最长时间（毫秒）
  socketTimeout: 10000 #与服务端保持连接超时时间（毫秒）
  validateAfterInactivity: 20000 #空闲多长时间来校验链接的有效性（毫秒）
config:
  jwt:
    secret: wangkang #加密密钥
    expire: 3600 #token有效时间
    header: token #header名称
jpush:
  appKey: d74262befa9ee1742820ed87
  masterSecret: 124cd0d7f458ed1729d31d18
  liveTime: 300000
es:
  host: 10.32.16.179
  port: 9200
  schema: http
